SYMBOLS {
    __HIMEM__:        type = weak,   value = $BFFF; # Beyond this point, we have the I/O area and Kernel.
    __STACKSTART__:   type = weak,   value = $1FFF;
    __STACKSIZE__:    type = weak,   value = __SLOT0_SIZE__ - __INIT_SIZE__ - __BSS_SIZE__;
}

MEMORY {
    ZP:       type = rw, file = "", define = yes,   start = $0040, size = $00F0 - $0040;
    KERNEL:   type = rw, file = "", define = yes,   start = $00f0, size = $10;
    SLOT0:    type = rw, file = "", define = yes,   start = $0400, size = $2000-$400;
    PGZ:      type = ro, file = %O, define = yes,   start = $1ff9, size = $7;
    MAIN:     type = rw, file = %O, define = yes,   start = $2000, size = $8000;
}

SEGMENTS {
    ZEROPAGE:       load = ZP,      type = zp;
    KERNEL_ARGS:    load = KERNEL,  type = zp;
    INIT:           load = SLOT0,   type = bss, define = yes;
    BSS:            load = SLOT0,   type = bss, define = yes;
    HEADER:         load = PGZ,     type = ro;
    CODE:           load = MAIN,    type = ro,  define = yes;
    RODATA:         load = MAIN,    type = ro;
    DATA:           load = MAIN,    type = rw,  define = yes;
    END:            load = MAIN,    type = ro,  define = yes;
    STARTUP:        load = MAIN,    type = ro,  define = yes;
    ONCE:           load = MAIN,    type = ro,  optional = yes;
    PGZ_END:        load = MAIN,    type = ro,  define = yes;
}

FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = ONCE;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
